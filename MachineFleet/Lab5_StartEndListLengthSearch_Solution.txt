#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct node
{
	int data;
	struct node* NEXT;
}nodeT;


void addAtTheEnd(nodeT* top);
void addAtTheStart(nodeT** top);

void addAtTheEndV2(nodeT* top, int newData);
void addAtTheStartV2(nodeT **top, int newData);

void display(nodeT* top);
int length(nodeT* top);
int search(nodeT* top, int searchTerm);
void deleteAtTheEnd(nodeT* top);
void saveList(nodeT* top);

void main()
{
	nodeT* headPtr = NULL;
	nodeT* temp;
	nodeT* newNode;
	nodeT* prev = NULL;
	int option;
	int count;
	int found;
	int searchTerm;
	FILE* ip;
	int dataFromFile;
	int numInputs;

	//Load the content of the file into the list.
	ip = fopen("backup.txt", "r");

	if (ip == NULL)
	{
		printf("Nothing to initialise the linked list\n");
	}
	else
	{
		while (!feof(ip))
		{
			numInputs = fscanf(ip, "%d", &dataFromFile);

			if(numInputs==1)
			{ 
				if (headPtr == NULL)
					addAtTheStartV2(&headPtr, dataFromFile);
				else
					addAtTheEndV2(headPtr, dataFromFile);
			}
		}

		fclose(ip);
	}

	printf("Enter 1 to add a node at the beginning\n");
	printf("Enter 2 to add a node at the end\n");
	printf("Enter 3 to display all the nodes\n");
	printf("Enter 4 to delete at the end\n");
	printf("Enter 5 to get the length of the list\n");
	printf("Enter 6 to search the list\n");
	printf("Enter -1 to exit\n");
	scanf("%d", &option);

	while (option != -1)
	{
		if (option == 1)
		{
			addAtTheStart(&headPtr);
		}
			
		else if(option == 2)
		{
			if (headPtr == NULL)
			{
				addAtTheStart(&headPtr);
			}
			else
			{
				addAtTheEnd(headPtr);
			}
		}

		else if (option == 3)
		{
			display(headPtr);
		}

		else if (option == 4)
		{
			if (length(headPtr) > 1)
			{
				deleteAtTheEnd(headPtr);
			}
			else
			{
				printf("The list is not long enought to call this function\n");
			}
		}

		else if (option == 5)
		{
			count = length(headPtr);
			printf("The length of the list is %d\n", count);
		}

		else if (option == 6)
		{
			printf("Please enter the integer you wish to search for\n");
			scanf("%d", &searchTerm);

			found = search(headPtr, searchTerm);

			if (found == 0)
				printf("The value %d does not exist in the list\n", searchTerm);
			else
				printf("The value %d is in of the list\n", searchTerm);
		}


		printf("Enter 1 to add a node at the beginning\n");
		printf("Enter 2 to add a node at the end\n");
		printf("Enter 3 to display all the nodes\n");
		printf("Enter 4 to delete at the end\n");
		printf("Enter 5 to get the length of the list\n");
		printf("Enter 6 to search the list\n");
		printf("Enter -1 to exit\n");
		scanf("%d", &option);
	}

	saveList(headPtr);
}

void addAtTheStart(nodeT** top)
{
	nodeT* newNode;

	newNode = (nodeT*)malloc(sizeof(nodeT));
	printf("Please enter the data for the new node\n");
	scanf("%d", &newNode->data);

	newNode->NEXT = *top;
	*top = newNode;
}
void addAtTheEnd(nodeT* top)
{
	nodeT* temp;
	nodeT* newNode;

	temp = top;

	while (temp->NEXT != NULL)
	{
		temp = temp->NEXT;
	}

	newNode = (nodeT*)malloc(sizeof(nodeT));
	printf("Please enter the data\n");
	scanf("%d", &newNode->data);

	temp->NEXT = newNode;
	newNode->NEXT = NULL;

}

void addAtTheEndV2(nodeT* top, int newData)
{
	nodeT* temp;
	nodeT* newNode;

	temp = top;

	while (temp->NEXT != NULL)
	{
		temp = temp->NEXT;
	}

	newNode = (nodeT*)malloc(sizeof(nodeT));
	printf("Please enter the data\n");
	newNode->data = newData;

	temp->NEXT = newNode;
	newNode->NEXT = NULL;
}
void addAtTheStartV2(nodeT** top, int newData)
{
	nodeT* newNode;

	newNode = (nodeT*)malloc(sizeof(nodeT));
	printf("Please enter the data for the new node\n");
	newNode->data = newData;

	newNode->NEXT = *top;
	*top = newNode;
}

void display(nodeT* top)
{
	nodeT* temp;

	temp = top;

	while (temp != NULL)
	{
		printf("The value of the node is %d\n", temp->data);

		temp = temp->NEXT;
	}

}
int length(nodeT* top)
{
	nodeT* temp;
	int count = 0;

	temp = top;

	while (temp != NULL)
	{
		count++;
		temp = temp->NEXT;
	}

	return count;

}
int search(nodeT* top, int searchTerm)
{
	nodeT* temp;
	int count = 0;
	int found = 0;

	temp = top;
	

	while (temp != NULL)
	{
		count++;

		if (temp->data == searchTerm)
		{
			found = 1;
			break;
		}

		temp = temp->NEXT;

	}

	return found;

}
void deleteAtTheEnd(nodeT* top)
{
	nodeT* temp;
	nodeT* prev=NULL;

	temp = top;

	while (temp->NEXT != NULL)
	{
		prev = temp;
		temp = temp->NEXT;
	}

	prev->NEXT = NULL;
	free(temp);

}

void saveList(nodeT* top)
{
	nodeT* temp;
	FILE* op;

	op = fopen("backup.txt", "w");

	if (op == NULL)
	{
		printf("The list is not backed up\n");
	}
	else
	{
		temp = top;

		while (temp != NULL)
		{
			fprintf(op,"%d\n", temp->data);

			temp = temp->NEXT;
		}

		fclose(op);
	}
}